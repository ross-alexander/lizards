head	1.4;
access;
symbols;
locks
	ralexand:1.4; strict;
comment	@// @;


1.4
date	2010.01.28.12.20.46;	author ralexand;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.20.17.03.47;	author ralexand;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.17.13.11.45;	author ralexand;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.11.07.36.46;	author ralexand;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Move world to new file.
@
text
@#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libxml++/libxml++.h>

extern "C" {
#include "lualib.h"
#include "lauxlib.h"
}

#include <lizards.h>
#include "local.h"


void dump_stack(lua_State *L)
{
  int top = lua_gettop(L);
  for (int i = top; i > 0; i--)
    {
      printf("%02d: ", i);
      if (lua_isnil(L, i))
	printf("Nil");
      else if (lua_isuserdata(L, i))
	printf("Userdata");
      else if (lua_istable(L, i))
	printf("Table");
      else
	printf("'%s'", lua_tostring(L, i));
      printf("\n");
    }
}

/* ----------------------------------------------------------------------
--
-- Meta_register
--
---------------------------------------------------------------------- */


int Meta_register(lua_State *L, const char *name, const luaL_reg methods[], const luaL_reg meta[], int global)
{
  lua_pushlstring(L, name, strlen(name));           /* name of Image table */
  lua_newtable(L);             /* Methods table */
  lua_gettop(L);
  lua_newtable(L);             /* Metatable */
  lua_gettop(L);

  /*
    03: Metatable
    02: Methods
    01: "World"
  */
  
  lua_pushliteral(L, "__index");	/* add index event to metatable */
  lua_pushvalue(L, 2);
  lua_settable(L, 3);          	 /* metatable.__index = methods */

  //  lua_pushliteral(L, "__metatable");    /* hide metatable */
  //  lua_pushvalue(L, 2);
  //  lua_settable(L, 3);       	    /* metatable.__metatable = methods */

  lua_pushvalue(L, 2);
  luaL_register(L, 0, methods);	/* fill methods table */
  lua_pop(L, 1);
  
  luaL_register(L, 0, meta);	/* fill metatable */
  
  lua_pushvalue(L, 1);
  lua_pushvalue(L, 3);
  lua_settable(L, LUA_REGISTRYINDEX);
  if (global)
    {
      lua_pop(L, 1);
      lua_settable(L, LUA_GLOBALSINDEX);
    }
  else
    {
      lua_pop(L, 3);
    }
  return 0;
}

/* ----------------------------------------------------------------------

main
---------------------------------------------------------------------- */

int main(int argc, char *argv[])
{
  lua_State *L = lua_open();
  luaL_openlibs(L);

  Hex_register(L);
  Map_register(L);
  Player_register(L);

  if(argc > 1)
    {
      int ret = luaL_dofile(L, argv[1]);
      if (ret != 0)
	{
	  printf("%s\n", lua_tostring(L, -1));
	}
      assert(ret == 0);
    }
  lua_close(L);
  return 0;
}
@


1.3
log
@Got map working.
@
text
@d13 1
a14 2
#define WORLD "World"
#define MAP "Map"
d36 1
a36 1
-- hex
d41 1
a41 104
/* ----------------------------------------------------------------------
--
-- map
--
---------------------------------------------------------------------- */
map_t* toMap(lua_State *L, int index)
{
  map_t **mapp = (map_t**)lua_touserdata(L, index);
  if (mapp == NULL) luaL_typerror(L, index, MAP);
  return *mapp;
}

int Map_width(lua_State *L)
{
  map_t *map = toMap(L, 1);
  lua_pushnumber(L, map->width);
  return 1;
}

static int Map_tostring (lua_State *L)
{
  map_t *map = toMap(L, 1);
  lua_pushfstring(L, "Map(%d x %d)", map->width, map->height);
  return 1;
}

/* ----------------------------------------------------------------------
--
-- world
--
---------------------------------------------------------------------- */

world_t *checkWorld(lua_State *L, int index)
{
  world_t **bar;
  luaL_checktype(L, index, LUA_TUSERDATA);
  bar = (world_t**)luaL_checkudata(L, index, WORLD);
  return *bar;
}

world_t* toWorld(lua_State *L, int index)
{
  world_t **bar = (world_t**)lua_touserdata(L, index);
  if (bar == NULL) luaL_typerror(L, index, WORLD);
  return *bar;
}

world_t* pushWorld(lua_State *L)
{
  world_t **bar = (world_t**)lua_newuserdata(L, sizeof(world_t*));
  luaL_getmetatable(L, WORLD);
  lua_setmetatable(L, -2);
  
  return *bar;
}

static int World_game(lua_State *L)
{
  printf("Topstack = %d\n", lua_gettop(L));
  world_t *w = checkWorld(L, 1);
  printf("w = %p\n", w);
  lua_pushstring(L, w->game);
  return 1;
}

int World_map(lua_State *L)
{
  world_t *w = checkWorld(L, 1);
  map_t **mapp = (map_t**)lua_newuserdata(L, sizeof(map_t*));
  *mapp = w->map;
  luaL_getmetatable(L, MAP);
  lua_setmetatable(L, -2);
  return 1;
}

static int World_new(lua_State *L)
{
  const char *s = luaL_optstring(L, 1, 0);
  assert(s != NULL);

  world_t *w = new world_t(s);
  world_t **bar = (world_t**)lua_newuserdata(L, sizeof(world_t*));
  *bar = w;
  printf("World_new(%s, %p)\n", s, w);
  luaL_getmetatable(L, WORLD);
  lua_setmetatable(L, -2);
  checkWorld(L, -1);
  return 1;
}

static int World_gc (lua_State *L)
{
  printf("bye, bye, bar\n");
  return 0;
}

static int World_tostring (lua_State *L)
{
  world_t *w = toWorld(L, 1);
  lua_pushfstring(L, "World(%s)", w->game);
  return 1;
}

int World_register (lua_State *L, const char *name, const luaL_reg methods[], const luaL_reg meta[], int global)
d59 3
a61 3
  lua_pushliteral(L, "__metatable");    /* hide metatable */
  lua_pushvalue(L, 2);
  lua_settable(L, 3);       	    /* metatable.__metatable = methods */
d94 3
a96 26

  static const luaL_reg World_methods[] = {
    {"new",	World_new},
    {"game",	World_game},
    {"map",	World_map},
    {0, 0},
  };
  
  static const luaL_reg World_meta[] = {
    {"__gc",       World_gc},
    {"__tostring", World_tostring},
    {0, 0}
  };

  static const luaL_reg Map_methods[] = {
    {"width",		Map_width},
    {0, 0},
  };
  
  static const luaL_reg Map_meta[] = {
    {"__tostring", Map_tostring},
    {0, 0}
  };

  World_register(L, WORLD, World_methods, World_meta, 1);
  World_register(L, MAP, Map_methods, Map_meta, 0);
@


1.2
log
@Backup
@
text
@d4 1
d15 1
d17 58
a74 1
world_t *checkWorld (lua_State *L, int index)
a88 1

d107 10
a122 1

d125 1
a125 3

  printf("World_new(%s, %p, %p)\n", s, w, bar);

d140 2
a141 3
  char buff[32];
  sprintf(buff, "%p", toWorld(L, 1));
  lua_pushfstring(L, "World (%s)", buff);
d145 17
d163 3
a165 5
static const luaL_reg World_methods[] = {
  {"new",        World_new},
  {"game",	 World_game},
  {0, 0},
};
d167 15
a181 11
static const luaL_reg World_meta[] = {
  {"__gc",       World_gc},
  {"__tostring", World_tostring},
  //  {"__add",      Foo_add},
  {0, 0}
};

void dump_stack(lua_State *L)
{
  int top = lua_gettop(L);
  for (int i = top; i > 0; i--)
d183 1
a183 1
      printf("%02d: %s\n", i, lua_tostring(L, i));
d185 1
d188 1
a188 40
#define newtable(L) (lua_newtable(L), lua_gettop(L))

int World_register (lua_State *L)
{
#ifdef X
  luaL_register(L, WORLD, World_methods);  /* create methods table, add it to the globals */

  luaL_newmetatable(L, WORLD);          /* create metatable for Foo, and add it to the Lua registry */
  luaL_register(L, 0, World_meta);    /* fill metatable */

  lua_pushliteral(L, "__index");
  lua_pushvalue(L, -3);               /* dup methods table*/
  lua_rawset(L, -3);                  /* metatable.__index = methods */
  lua_pushliteral(L, "__metatable");
  lua_pushvalue(L, -3);               /* dup methods table*/
  lua_rawset(L, -3);                  /* hide metatable:
                                         metatable.__metatable = methods */
  lua_pop(L, 1);                      /* drop metatable */
  lua_pop(L, 1); // After foo register the methods are still on the stack, remove them.
  return 1;                           /* return methods on the stack */
#else
  int metatable, methods;

  lua_pushliteral(L, WORLD);           /* name of Image table */

  methods   = newtable(L);             /* Image methods table */
  metatable = newtable(L);             /* Image metatable */

  printf("methods = %d\n", methods);
  printf("metatable = %d\n", metatable);

  lua_pushliteral(L, "__index");       /* add index event to metatable */
  lua_pushvalue(L, methods);
  lua_settable(L, metatable);           /* metatable.__index = methods */

  lua_pushliteral(L, "__metatable");    /* hide metatable */
  lua_pushvalue(L, methods);
  lua_settable(L, metatable);           /* metatable.__metatable = methods */

  luaL_register(L, 0, World_meta);	/* fill metatable */
d190 2
a191 8
  lua_remove(L, -1);
  dump_stack(L);

  luaL_register(L, 0, World_methods);	/* fill Image methods table */
  lua_settable(L, LUA_GLOBALSINDEX);    /* add Image to globals */
  return 0;
#endif
}
d198 26
a223 1
  World_register(L);
d228 4
@


1.1
log
@Initial revision
@
text
@d95 9
a107 1
#define X 1
d128 1
d131 4
d138 1
d142 7
a148 2
  luaL_openlib(L, 0, World_meta,  0);   /* fill metatable */
  luaL_openlib(L, 0, World_methods, 1); /* fill Image methods table */
@
