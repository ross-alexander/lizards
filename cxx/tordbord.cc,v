head	1.1;
access;
symbols;
locks
	ralexand:1.1; strict;
comment	@// @;


1.1
date	2008.06.12.11.24.11;	author ralexand;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <libxml/tree.h>

#include "lizards.h"

static int lizards_in_band(feature_t *f)
{
  if (f == NULL)
    return 0;
  if (f->type == BAND)
    {
      band_t *b = (band_t*)f;
      return b->size();
    }
  return 0;
}

static int lizards_in_hex(hex_t *h)
{
  return(lizards_in_band(h->has_feature(BAND)));
}


#define NUM_POSSIBLE_LINES 22

struct text_t {
  const char *full;
  const char *abb;
  int order;
  int (*func)(turn_t *, char *strs[], int player);
};

static const char* order_colours [5] = { "RED", "GRN", "GRY", "BLK", "YEL" };
static const char* chant_code [NUMBER_CHANTS] = { "EYES", "REVE", "SHUN", "MOUL",
					    "COER", "TRAN", "DARK", "FREE",
					    "SUMM", "GATE" };

/* ----------------------------------------------------------------------
--
-- add_order
--
---------------------------------------------------------------------- */
static int add_order(turn_t *t, order_t *order)
{
  int i, split_total;
  hex_t *hex;

  player_t *p = t->world->get_player(order->player);

  switch (order->type)
    {
    case MOVE:
      if (order->player != order->src->owner)
	{
	  p->mesg(" - MOVE %s %s order failed, you do not own this hex.\n", order->src->title, (char*)(order->dir));
	  return 0;
	}
      for (i = 0; i < t->num_orders; i++)
	if (order == t->order_list[i])
	  {
	    /* Redundant order ignored! */
	    p->mesg(" - MOVE %s %s order fail, not enough lizards in hex.\n", order->src->title, (char*)order->dir);
	    return 0;
	  }
      break;
    case SPLIT:
      for (i = 0, split_total = 0; i < t->num_orders; i++)
	if (t->order_list[i]->type == SPLIT &&
	    order->player == t->order_list[i]->player &&
	    (order->src->xy == t->order_list [i]->src->xy))
	  {
	    split_total += lizards_in_band(t->order_list[i]->band);
	  }
      hex = order->src;
      if (split_total >= lizards_in_hex(hex))
	{
	    /* Redundant order ignored! */
	    fprintf(stdout, "(order-failed-stage-2 split %d %d \"not enough lizards in hex\")\n",
		    order->src->xy.x, order->src->xy.y);
	    return 0;
	}
      break;
    case RECRUIT:
      for (i = 0; i < t->num_orders; i++)
	if (t->order_list[i]->type == RECRUIT &&
	    order->player == t->order_list[i]->player &&
	    order->src == t->order_list [i]->src)
	  {
	    /* Redundant order ignored! */
	    p->mesg(" - RECRUIT %s ignored, only one recruit allowed from hex.\n",
		    order->src->title);
	    return 0;
	  }
      break;
#ifdef IgnoreThisStuff

    case SNEAK:
      for (work1 = 0, sneak_total = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == SNEAK &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
	{
	  sneak_total ++;
	}

	get_hex (world, order->x_hex, order->y_hex, &hex);

	if (sneak_total >= spy_lizards_in_hex (world, order->x_hex, order->y_hex, order->player))
	{
	  /* Redundant order ignored! */

	  xy_to_string (order->x_hex, order->y_hex, hex_loc);

	  if (order->moves [1] != 0)
	    player_mesg (world, order->player,
	      " - SNEAK %s %s %s ignored, not enough lizards starting in hex.\n",
	      hex_loc, dir [order->moves [0]], dir [order->moves [1]]);
	  else
	    player_mesg (world, order->player,
	      " - SNEAK %s %s ignored, not enough lizards starting in hex.\n",
	      hex_loc, dir [order->moves [0]]);

	  return;
	}

      break;
    case CHANT:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == CHANT &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	if (order->moves [1] != 0)
	  player_mesg (order->player,
	    " - CHANT %s %s %s %s ignored, only one chant allowed from hex.\n",
	    hex_loc, dir [order->moves [0]], dir [order->moves [1]],
	    chant_code [order->yellow_lizards]);
	else
	  player_mesg (order->player,
	    " - CHANT %s %s %s ignored, only one chant allowed from hex.\n",
	    hex_loc, dir [order->moves [0]],
	    chant_code [order->yellow_lizards]);

	return;
      }

      break;
    case LOB:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == LOB &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	if (order->moves [1] != 0)
	  player_mesg (order->player,
	    " - LOB %s %s %s ignored, only one lob allowed from hex.\n",
	    hex_loc, dir [order->moves [0]], dir [order->moves [1]]);
	else
	  player_mesg (order->player,
	    " - LOB %s %s ignored, only one lob allowed from hex.\n",
	    hex_loc, dir [order->moves [0]]);

	return;
      }

      break;
    case BUILD_FERTILE:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == BUILD_FERTILE &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	player_mesg (order->player,
	  " - BUILD FERTILE %s ignored, only one fertile build allowed from hex.\n",
	  hex_loc);

	return;
      }

      break;
    case BUILD_DEN:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == BUILD_DEN &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	player_mesg (order->player,
	  " - BUILD DEN %s ignored, only one den build allowed from hex.\n",
	  hex_loc);

	return;
      }

      break;
    case BUILD_BRIDGE:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == BUILD_BRIDGE &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	player_mesg (order->player,
	  " - BUILD BRIDGE %s %s ignored, only one bridge build allowed from hex.\n",
	  hex_loc, order->moves [0]);

	return;
      }

      break;
    case DESTROY_FERTILE:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == DESTROY_FERTILE &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	player_mesg (order->player,
	  " - DESTROY FERTILE %s ignored, only one fertile destroy allowed from hex.\n",
	  hex_loc);

	return;
      }

      break;
    case DESTROY_BRIDGE:
      for (work1 = 0; work1 < world->num_orders; work1 ++)
	if (world->order_list [work1]->order_type == DESTROY_BRIDGE &&
	    order->player == world->order_list [work1]->player &&
	    order->x_hex == world->order_list [work1]->x_hex &&
	    order->y_hex == world->order_list [work1]->y_hex)
      {
	/* Redundant order ignored! */

	xy_to_string (order->x_hex, order->y_hex, hex_loc);

	player_mesg (order->player,
	  " - DESTROY BRIDGE %s %s ignored, only one bridge destroy allowed from hex.\n",
	  hex_loc, order->moves [0]);

	return;
      }

      break;
#endif
    default:
      break;
  }
  t->order_list [t->num_orders] = order;
  t->num_orders ++;
  if (t->num_orders >= MAX_ORDERS_PER_TURN)
    {
      printf ("FATAL ERROR: Exceeded Maximum of %d orders per turn.\n",
	      MAX_ORDERS_PER_TURN);
      exit (EXIT_FAILURE);
    }
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_move
--
---------------------------------------------------------------------- */
static int order_move(turn_t *t, char *strs[], int player)
{
  order_t *order, *orders = NULL;
  hex_t *hex, *src, *dst;
  band_t *b;
  point_t xy;
  int i;

  if ((hex = src = t->world->map(strs[1])) == NULL)
    {
      printf("Unknown hex %s.\n", strs[1]);
      return 0;
    }
  
  for (i = 2; i < 4; i++)
    if (strs[i] && (dst = hex->adjacent(strs[i])))
      {
	dir_t d(strs[i]);
	order = new order_move_t(t, player, hex, dst, (Direction)(int)d);
	if (orders)
	  orders->append(order);
	else
	  orders = order;
	printf("Create order MOVE from %s to %s (%s)\n",
	       (char*)(*order->src),
	       (char*)(*order->dst),
	       (char*)(d));
	hex = dst;
      }

  assert(order != NULL);

  /* --------------------
     Add band to order even if empty and let the move resolver deal with it
     -------------------- */
  
  for (order_t *o = orders; o != NULL; o = o->chain)
    {
      if ((b = (band_t*)src->has_feature(BAND)))
	{
	  o->band = new band_t(*b);
	  printf("o->band = %s\n", (char*)(*o->band));
	}
      else
	o->band = new band_t();
    }
  if (orders && (add_order (t, orders) == 0))
    delete orders;
  return 1;
}


/* ----------------------------------------------------------------------
--
-- order_split
--
---------------------------------------------------------------------- */
static int order_split(turn_t *t, char *strs[], int player)
{
  hex_t *hex, *src, *dst;
  int i, j, num;
  order_t *order, *orders = NULL;

  if ((hex = src = t->world->map(strs[1])) == NULL)
    {
      printf("Unknown hex %s\n", strs[1]);
      return 0;
    }

  int count[LIZARD_TYPES] = {0,0,0,0,0};
  
  for (i = 2; i < 10; i++)
    {
      if ((num = atoi (strs[i])) == 0)
	break;
      for (j = 0; j < LIZARD_TYPES; j++)
	if (strcmp (strs[i] + strlen(strs[i]) - 3, order_colours [j]) == 0)
	  break;
    }

  band_t *band = new band_t(count);

  for (j = i; j < i+2; j++)
    if (strs[j] && (dst = hex->adjacent(strs[j])))
      {
	dir_t d(strs[i]);
	order = new order_split_t(t, player, hex, dst, d);
	if (orders)
	  orders->append(order);
	else
	  orders = order;
	printf("Create order SPLIT(%s) from %s to %s (%s)\n",
	       (char*)(*band),
	       (char*)(*order->src),
	       (char*)(*order->dst),
	       (char*)(d));
	hex = dst;
      }

  assert(order != NULL);

  /* --------------------
     Add band to order even if empty and let the move resolver deal with it
     -------------------- */
  
  for (order_t *o = orders; o != NULL; o = o->chain)
    {
      o->band = new band_t(*band);
    }
  if (orders && (add_order (t, orders) == 0))
    delete orders;
  delete band;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_sail
--
---------------------------------------------------------------------- */
static int order_sail(turn_t *t, char *strs[], int player)
{
  order_t *order, *orders = NULL;
  hex_t *hex, *src, *dst;
  band_t *b;
  point_t xy;
  int i;

  if ((hex = src = t->world->map(strs[1])) == NULL)
    {
      printf("Unknown hex %s.\n", strs[1]);
      return 0;
    }
  
  for (i = 2; i < 4; i++)
    if (strs[i] && (dst = hex->adjacent(strs[i])))
      {
	dir_t d(strs[i]);
	order = new order_sail_t(t, player, hex, dst, d);
	if (orders)
	  orders->append(order);
	else
	  orders = order;
	printf("Create order SAIL from %s to %s (%s)\n",
	       (char*)(*order->src),
	       (char*)(*order->dst),
	       (char*)(d));
	hex = dst;
      }

  assert(order != NULL);

  /* --------------------
     Add band to order even if empty and let the move resolver deal with it
     -------------------- */
  
  for (order_t *o = orders; o != NULL; o = o->chain)
    {
      if ((b = (band_t*)src->has_feature(BAND)))
	{
	  o->band = new band_t(*b);
	  printf("o->band = %s\n", (char*)(*o->band));
	}
      else
	o->band = new band_t();
    }
  if (orders && (add_order (t, orders) == 0))
    delete orders;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_sneak
--
---------------------------------------------------------------------- */
static int order_sneak(turn_t *t, char *strs[], int player)
{
  order_t *order, *orders = NULL;
  hex_t *hex, *src, *dst;
  point_t xy;
  int i;

  if ((hex = src = t->world->map(strs[1])) == NULL)
    {
      printf("Unknown hex %s.\n", strs[1]);
      return 0;
    }
  
  for (i = 2; i < 4; i++)
    if (strs[i] && (dst = hex->adjacent(strs[i])))
      {
	dir_t d(strs[i]);
	order = new order_sneak_t(t, player, hex, dst, (Direction)(int)d);
	if (orders)
	  orders->append(order);
	else
	  orders = order;
	printf("Create order SNEAK from %s to %s (%s)\n",
	       (char*)(*order->src),
	       (char*)(*order->dst),
	       (char*)(d));
	hex = dst;
      }
  
  assert(order != NULL);
  
  if (add_order(t, orders) == 0)
    delete orders;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_recruit
--
---------------------------------------------------------------------- */
static int order_recruit(turn_t *t, char *strs[], int player)
{
  hex_t *hex = t->world->map(strs[1]);
  order_t *order;

  if (hex == NULL)
    {
      fprintf(stdout,
	      "(order-failed-stage-1 recruit %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }
  order = new order_recruit_t(t, player, hex);
  if (!add_order(t, order))
    delete order;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_build_fertile
--
---------------------------------------------------------------------- */
static int order_build_fertile(turn_t *t, char *strs[], int player)
{
  hex_t *hex;
  order_t *order;

  if ((hex = t->world->map(strs[1])) == NULL)
    {
      fprintf(stdout, "(order-failed-stage-1 build_fertile %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }

  order = new order_build_fertile_t(t, player, hex);
  if (!add_order(t, order))
    delete order;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_destroy_fertile
--
---------------------------------------------------------------------- */
static int order_destroy_fertile(turn_t *t, char *strs[], int player)
{
  hex_t *hex;
  order_t *order;

  if ((hex = t->world->map(strs[1])) == NULL)
    {
      fprintf(stdout, "(order-failed-stage-1 destroy_fertile %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }

  order = new order_destroy_fertile_t(t, player, hex);
  if (!add_order(t, order))
    delete order;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_build_raft
--
---------------------------------------------------------------------- */
static int order_build_raft(turn_t *t, char *strs[], int player)
{
  hex_t *hex;
  order_t *order;

  if ((hex = t->world->map(strs[1])) == NULL)
    {
      fprintf(stdout, "(order-failed-stage-1 destroy_fertile %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }

  dir_t dir(strs[2]);
  if (hex_t *dst = hex->adjacent(dir))
    {
      order = new order_build_raft_t(t, player, hex, dst, dir);
    }
  if (!add_order(t, order))
    delete order;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_build_bridge
--
---------------------------------------------------------------------- */
static int order_build_bridge(turn_t *t, char *strs[], int player)
{
  hex_t *hex;
  order_t *order;

  if ((hex = t->world->map(strs[1])) == NULL)
    {
      fprintf(stdout, "(order-failed-stage-1 build_bridge %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }

  dir_t dir(strs[2]);
  if (hex_t *dst = hex->adjacent(dir))
    {
      order = new order_build_bridge_t(t, player, hex, dst, dir);
    }
  if (!add_order(t, order))
    delete order;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_destroy_bridge
--
---------------------------------------------------------------------- */
static int order_destroy_bridge(turn_t *t, char *strs[], int player)
{
  hex_t *hex;
  order_t *order;

  if ((hex = t->world->map(strs[1])) == NULL)
    {
      fprintf(stdout, "(order-failed-stage-1 destroy_bridge %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }

  dir_t dir(strs[2]);
  if (hex_t *dst = hex->adjacent(dir))
    {
      order = new order_destroy_bridge_t(t, player, hex, dst, dir);
    }
  if (!add_order(t, order))
    delete order;
  return 1;
}

/* ----------------------------------------------------------------------
--
-- order_build_den
--
---------------------------------------------------------------------- */
static int order_build_den(turn_t *t, char *strs[], int player)
{
  hex_t *hex;
  order_t *order;

  if ((hex = t->world->map(strs[1])) == NULL)
    {
      fprintf(stdout, "(order-failed-stage-1 build_den %s \"illegal hex\")\n",
	      hex->title);
      return 0;
    }

  order = new order_build_den_t(t, player, hex);
  if (!add_order(t, order))
    delete order;
  return 1;
}



/* ----------------------------------------------------------------------
--
-- order_message
--
---------------------------------------------------------------------- */
static int order_message(turn_t *t, char *strs[], int player)
{
#ifdef Ignore
  if (present_player == 0)
    {
      printf ("FATAL ERROR: Order issued when player number unknown. Press SPACE.\n");
      exit (EXIT_FAILURE);
    }
  strcpy (tmp_string, work_string);
  work1 = 0;
  while (fgets (tmp_string2, 140, in_fptr) != '\0')
    {
      strcpy (mesg_string [work1], tmp_string2);
      work1 ++;
      if (strcmp (strupr (tmp_string2), "ENDMESG\n") == 0)
	{
	  work1 --;
	  break;
	}
      if (work1 == 40)
	break;
    }
  sprintf (filename, "%s%s%02d_%03d.%s", world->path,
	   PLYPLY_MESG_F, present_player, world->turn, world->game);
  if ((fptr = fopen (filename, "at")) == '\0')
    {
      printf ("FATAL ERROR: Unable to append to %s file. Press SPACE.\n",
	      filename);
      exit (EXIT_FAILURE);
    }
  if (tmp_string [0] == '\0')
    fprintf (fptr, " - Message SENT by you to ALL Players\n");
  else
    fprintf (fptr, " - Message SENT by you to Player(s): %s\n", tmp_string);
  for (work2 = 0; work2 < work1; work2 ++)
    fprintf (fptr, "   %s", mesg_string [work2]);
  fprintf (fptr, "\n");
  if (tmp_string [0] == '\0')
    {
      for (work3 = 1; work3 < world->num_players + 1; work3 ++)
	{
	  if (work3 != present_player)
	    {
	      sprintf (filename, "%s%s%02d_%03d.%s", world->path,
		       PLYPLY_MESG_F, work3, world->turn, world->game);
	      if ((fptr = fopen (filename, "at")) == '\0')
		{
		  printf ("FATAL ERROR: Unable to append to %s file. Press SPACE.\n",
			  filename);
		  exit (EXIT_FAILURE);
		}
	      fprintf (fptr, " - Message from Player %d, '%s' Clan:\n",
		       present_player,
		       world->player[present_player]->clan);
	      for (work2 = 0; work2 < work1; work2 ++)
		fprintf (fptr, "   %s", mesg_string [work2]);
	      fprintf (fptr, "\n");
	    }
	}
    }
  else
    {
      while (1)
	{
	  strtoken (tmp_string2, tmp_string, " ");
	  if (tmp_string2 [0] == '\0')
	    break;
	  if (atoi (tmp_string2) != present_player &&
	      atoi (tmp_string2) != 0)
	    {
	      sprintf (filename, "%s%s%02d_%03d.%s", world->path,
		       PLYPLY_MESG_F, atoi (tmp_string2), world->turn, world->game);
	      if ((fptr = fopen (filename, "at")) == '\0')
		{
		  printf ("FATAL ERROR: Unable to append to %s file. Press SPACE.\n",
			  filename);
		  exit (EXIT_FAILURE);
		}
	    fprintf (fptr, " - Message from Player %d, '%s' Clan:\n",
		     present_player,
		     world->player[present_player]->clan);
	    for (work2 = 0; work2 < work1; work2 ++)
	      fprintf (fptr, "   %s", mesg_string [work2]);
	    fprintf (fptr, "\n");
	    }
	}
    }
  return 1;
#endif
}

/* ----------------------------------------------------------------------
--
-- order_chant
--
---------------------------------------------------------------------- */
static int order_chant(turn_t *t, char *strs[], int player)
{
#ifdef Ignore
  if (present_player == 0)
        {
          printf ("FATAL ERROR: Order issued when player number unknown.\n");
	  exit (EXIT_FAILURE);
	}

	work_order.player = present_player;
	work_order.order_type = CHANT;

	strtoken (tmp_string2, tmp_string, " ");

	string_to_loc (tmp_string2, &work_x, &work_y);

	work_order.x_hex = work_x;
	work_order.y_hex = work_y;

	get_hex (world, work_x, work_y, &world_hex);

	work_order.red_lizards = 0;
	work_order.green_lizards = 0;
	work_order.grey_lizards = 0;
	work_order.black_lizards = 0;
	work_order.yellow_lizards = 0;

        work_order.moves [0] = 0;
	work_order.moves [1] = 0;

	strtoken (tmp_string2, tmp_string, " ");

	if ((work_order.black_lizards = atoi (tmp_string2)) == 0)
	  work_order.black_lizards = world_hex.black_lizards;
	else
	  strtoken (tmp_string2, tmp_string, " ");

	if (work_order.black_lizards > world_hex.black_lizards)
	  work_order.black_lizards = world_hex.black_lizards;

	for (work2 = 0; work2 < NUMBER_CHANTS; work2 ++)
	  if (strcmp (tmp_string2, chant_code [work2]) == 0)
	  {
	    work2 ++;
	    break;
	  }

	if (work2 == (NUMBER_CHANTS + 1))
	  work_order.yellow_lizards = 0;
	else
	  work_order.yellow_lizards = work2;

	strtoken (tmp_string2, tmp_string, " ");

	if (work2 == 10)
	  if (tmp_string [0] == '\0')
	    string_to_loc (tmp_string2, &work_order.red_lizards,
			   &work_order.green_lizards);
	  else {
	    strcat (tmp_string2, tmp_string);

	    string_to_loc (tmp_string2, &work_order.red_lizards,
			   &work_order.green_lizards);
	  }
	else {
	  work_order.moves [0] = string_to_direction (tmp_string2);

	  work_order.moves [1] = string_to_direction (tmp_string);
	}

	if (work_order.player > 0 && work_order.x_hex >= 0 &&
	    work_order.y_hex >= 0 && work_order.x_hex < world->x &&
	    work_order.y_hex < world->y && (work_order.moves [0] != 0 ||
	    work_order.yellow_lizards == 10) && work_order.yellow_lizards > 0)
	{
	  add_order (&work_order);
	} else {
	  player_mesg (present_player, " - 'CH %s' order is incorrectly written, or incomplete. Please refer to your Rulebook.\n",
	    work_string);
	}

	break;
      case 24:		/* System Message */
      case 25:
	strcpy (tmp_string, work_string);
	work1 = 0;
	while (fgets (tmp_string2, 140, in_fptr) != '\0')
	{
	  strcpy (mesg_string [work1], tmp_string2);
	  work1 ++;
	  if (strcmp (strupr (tmp_string2), "ENDMESG\n") == 0)
	  {
	    work1 --;
	    break;
	  }
	  if (work1 == 40)
	    break;
	}

	/* send 'the other bit' to PLAYER 0 ONLY - given to the rest of the
	   players by MESSAPND.EXE later! */

	sprintf (filename, "%s%s00_%03d.%s", world->path, PLYPLY_MESG_F,
	  world->turn, world->game);

	if ((fptr = fopen (filename, "at")) == '\0')
	{
          printf ("FATAL ERROR: Unable to append to %s file.\n",
		   filename);
	  exit (EXIT_FAILURE);
	}

	fprintf (fptr, " * The Other Bit:\n\n");

	for (work2 = 0; work2 < work1; work2 ++)
	  fprintf (fptr, "   %s", mesg_string [work2]);

	/* fclose (fptr); */

	break;
#endif
}

/* ----------------------------------------------------------------------
--
-- give_message
--
---------------------------------------------------------------------- */
static int order_give(turn_t *t, char *strs[], int player)
{
#ifdef Ignore
	if (present_player == 0)
	{
          printf ("FATAL ERROR: Order issued when player number unknown.\n");
	  exit (EXIT_FAILURE);
	}

	work_order.player = present_player;
	work_order.order_type = GIVE;

        strtoken (tmp_string2, tmp_string, " ");

	string_to_loc (tmp_string2, &work_x, &work_y);

	work_order.x_hex = work_x;
	work_order.y_hex = work_y;

	work_order.red_lizards = 0;
	work_order.green_lizards = 0;
	work_order.grey_lizards = 0;
	work_order.black_lizards = 0;
	work_order.yellow_lizards = 0;

        work_order.moves [0] = 0;
	work_order.moves [1] = 0;

	work_order.moves [0] = atoi (tmp_string);

	if (work_order.player > 0 && work_order.x_hex >= 0 &&
	    work_order.y_hex >= 0 && work_order.x_hex < world->x &&
	    work_order.y_hex < world->y && work_order.moves [0] != 0)
	{
	  add_order (&work_order);
	} else {
	  player_mesg (present_player, " - 'GI %s' order is incorrectly written, or incomplete. Please refer to your Rulebook.\n",
	    work_string);
	}

	break;
#endif
}

/* ----------------------------------------------------------------------
--
-- order_lob
--
---------------------------------------------------------------------- */
static int order_lob(turn_t *t, char *strs[], int player)
{
#ifdef Ignore

	if (present_player == 0)
	{
	  printf ("FATAL ERROR: Order issued when player number unknown.\n");
	  exit (EXIT_FAILURE);
	}

	work_order.player = present_player;
	work_order.order_type = LOB;

        strtoken (tmp_string2, tmp_string, " ");

	string_to_loc (tmp_string2, &work_x, &work_y);

	work_order.x_hex = work_x;
	work_order.y_hex = work_y;

	get_hex (world, work_x, work_y, &world_hex);

	work_order.red_lizards = 0;
	work_order.green_lizards = 0;
	work_order.grey_lizards = 0;
	work_order.black_lizards = 0;
	work_order.yellow_lizards = world_hex.yellow_lizards;

        work_order.moves [0] = 0;
	work_order.moves [1] = 0;

        strtoken (tmp_string2, tmp_string, " ");

	work_order.moves [0] = string_to_direction (tmp_string2);

	work_order.moves [1] = string_to_direction (tmp_string);

	if (work_order.player > 0 && work_order.x_hex >= 0 &&
	    work_order.y_hex >= 0 && work_order.x_hex < world->x &&
	    work_order.y_hex < world->y && work_order.moves [0] != 0)
	{
	  add_order (&work_order);
	} else {
	  player_mesg (present_player, " - 'LO %s' order is incorrectly written, or incomplete. Please refer to your Rulebook.\n",
	    work_string);
	}

	break;
#endif
}

/* ----------------------------------------------------------------------
--
-- order_free
--
---------------------------------------------------------------------- */
static int order_free(turn_t *t, char *strs[], int player)
{
#ifdef Ignore

      case 30:		/* Free Order */
      case 31:
	if (present_player == 0)
        {
          printf ("FATAL ERROR: Order issued when player number unknown.\n");
	  exit (EXIT_FAILURE);
	}

	work_order.player = present_player;
	work_order.order_type = FREE;

	strtoken (tmp_string2, tmp_string, " ");

	string_to_loc (tmp_string2, &work_x, &work_y);

	work_order.x_hex = work_x;
	work_order.y_hex = work_y;

	work_order.red_lizards = 0;
	work_order.green_lizards = 0;
	work_order.grey_lizards = 0;
	work_order.black_lizards = 0;
	work_order.yellow_lizards = 0;

	while (1)
	{
          strtoken (tmp_string2, tmp_string, " ");

	  work1 = atoi (tmp_string2);

	  if (work1 == 0)
	    break;

	  strsplt (tmp_string3, tmp_string2, strlen (tmp_string2) - 3);

	  for (work2 = 0; work2 < LIZARD_TYPES; work2 ++)
	    if (strcmp (tmp_string3, lizard_colours [work2]) == 0)
	      break;

	  switch (work2)
	  {
	    case 0:
	      work_order.red_lizards = work1;

	      break;
	    case 1:
	      work_order.green_lizards = work1;

	      break;
	    case 2:
	      work_order.grey_lizards = work1;

	      break;
	    case 3:
	      work_order.black_lizards = work1;

	      break;
	    case 4:
	      work_order.yellow_lizards = work1;

	      break;
	    default:
	      break;
	  }
	}

	work_order.moves [0] = 0;
	work_order.moves [1] = 0;

	if (work_order.player > 0 && work_order.x_hex >= 0 &&
	    work_order.y_hex >= 0 && work_order.x_hex < world->x &&
	    work_order.y_hex < world->y)
	{
	  add_order (&work_order);
	} else {
	  player_mesg (present_player, " - 'FR %s' order is incorrectly written, or incomplete. Please refer to your Rulebook.\n",
	    work_string);
	}

	break;
#endif
}

/* ----------------------------------------------------------------------
--
-- order_kill
--
---------------------------------------------------------------------- */
static int order_kill(turn_t *t, char *strs[], int player)
{
#ifdef Ignore

      case 36:		/* Kill Player Order */
      case 37:
	if (present_player == 0)
        {
          printf ("FATAL ERROR: Order issued when player number unknown.\n");
	  exit (EXIT_FAILURE);
	}

	work_order.player = present_player;
	work_order.order_type = KILL_PLAYER;

	work_order.x_hex = 0;
	work_order.y_hex = 0;

	work_order.red_lizards = 0;
	work_order.green_lizards = 0;
	work_order.grey_lizards = 0;
	work_order.black_lizards = 0;
	work_order.yellow_lizards = 0;

	work_order.moves [0] = 0;
	work_order.moves [1] = 0;

	add_order (&work_order);
#endif
}

/* ----------------------------------------------------------------------
--
-- order_erupt
--
---------------------------------------------------------------------- */
static int order_erupt(turn_t *t, char *strs[], int player)
{
#ifdef Ignore
      case 40:		/* Erupt Volcano Order */
      case 41:
	work_order.player = 0;
	work_order.order_type = ERUPT_VOLCANO;

	strtoken (tmp_string2, tmp_string, " ");

	string_to_loc (tmp_string2, &work_x, &work_y);

	work_order.x_hex = work_x;
	work_order.y_hex = work_y;

	get_hex (world, work_x, work_y, &world_hex);

	if (work_order.x_hex >= 0 && work_order.y_hex >= 0 &&
	    work_order.x_hex < world->x && work_order.y_hex < world->y &&
	    world_hex.terrain == VOLCANO)
	{
	  add_order (&work_order);
	}
	break;
#endif
}


/* ----------------------------------------------------------------------
--
-- order_spawn
--
---------------------------------------------------------------------- */
static int order_spawn(turn_t *t, char *strs[], int player)
{
#ifdef Ignore
      case 42:
      case 43:  	/* Spawn Turn Order */
	sprintf (filename, "%s%s%s", world->path, WORLD_SWITCH_F, world->game);

	if ((fptr = fopen (filename, "wt")) == '\0')
	{
	  printf ("FATAL ERROR: Unable to write to %s file.\n", filename);
	  exit (EXIT_FAILURE);
	}
	fprintf (fptr, "SPAWN\n");
	fclose (fptr);
	break;
#endif
}


/* ----------------------------------------------------------------------
--
-- ProcessFile
--
---------------------------------------------------------------------- */
static text_t possible_lines [NUM_POSSIBLE_LINES] = {
  //  {"", "/*", INACTIVE, NULL},
  {"PLAYER", "PL", PLAYER, NULL},
  {"MOVE", "MO", MOVE, order_move},
  {"SPLIT", "SP",SPLIT, order_split},
  {"SAIL", "SA", SAIL, order_sail},
  {"SNEAK", "SN", SNEAK, order_sneak},
  {"BUILD_RAFT", "BR", BUILD_RAFT, order_build_raft},
  {"BUILD_FERTILE", "BF", BUILD_FERTILE, order_build_fertile},
  {"BUILD_DEN", "BD", BUILD_DEN, order_build_den},
  {"BUILD_BRIDGE", "BB", BUILD_BRIDGE, order_build_bridge},
  {"DESTROY_FERTILE", "DF", DESTROY_FERTILE, order_destroy_fertile},
  {"DESTROY_BRIDGE", "DB", DESTROY_BRIDGE, order_destroy_bridge},
  {"RECRUIT", "RE", RECRUIT, order_recruit},
  {"FREE", "FR", FREE, order_free},
  {"CHANT", "CH", CHANT, order_chant},
  {"GIVE", "GI", GIVE, order_give},
  {"LOB", "LO", LOB, order_lob},
  {"MESSAGE", "MS", MESSAGE, order_message},
  {"MOD_MESG", "MMS", MOD_MESG, NULL},
  {"KILL", "KI", KILL_PLAYER, order_kill},
  {"ERUPT", "ER", ERUPT_VOLCANO, order_erupt},
  {"SPAWN_TURN", "ST", SPAWN_TURN, order_spawn},
  { NULL, NULL, NULL, NULL },
};

static int ProcessFile(FILE *in_fptr, turn_t *t)
{
  char str[256], *strs[15];
  int i, present_player;
  text_t *line_type;
  world_t *world = t->world;

  while (fgets (str, 256, in_fptr) != NULL)
    {
      for (i = 0; i < (int)(strlen(str)); i++)
	if (islower(str[i]))
	  str[i] = toupper(str[i]);

      /* --------------------
	 Break string into tokens
	 -------------------- */

      for (i = 0, strs[i] = strtok(str, " \n");
	   (i < 12) && strs[i] && strlen(strs[i]);
	   strs[i] = strtok(NULL, " \n"))
	i++;

      for (i = 0; strs[i]; i++)
	printf("%s ", strs[i]);

      printf("\n");

      /* --------------------
	 Match token to full or abbviated instruction
	 -------------------- */

      for (i = 0; possible_lines[i].full; i++)
	if (strcmp (strs[0], possible_lines[i].full) == 0 ||
	    strcmp (strs[0], possible_lines[i].abb) == 0)
	  break;
      line_type = &possible_lines[i];
      if (present_player == 0 && (line_type->order != PLAYER))
	{
	  fprintf (stdout, "(order-fail-stage-1 \"Order issued when player number unknown\")\n");
	  continue;
	}
      if (line_type->func)
	(*line_type->func)(t, strs, present_player);
      else
	switch (line_type->order)
	  {
	  case PLAYER:
	    i = atoi (strs[1]);
	    if ((i >= 1) && (i < world->num_players)  && world->player[i])
	      {
		present_player = i;
		printf ("Present Player: %d - %s.\n\n", i,
			world->player[i]->code);
	      }
	    else
	      {
		fprintf(stdout, "(order-failed-stage-1 player %d \"player does not exist\")\n", i);
		present_player = 0;
	      }
	    break;
	  default:
	    fprintf(stdout, "Unknown order found.\n");
	    break;
	  }
    }
  return 0;
}

/* ----------------------------------------------------------------------
--
-- main
--
---------------------------------------------------------------------- */
int turn_t::textorderconvert()
{
  char filename [255];
  int i;
  FILE *in_fptr;

  sprintf (filename, "%s/%s.%s%03d", world->dir, world->game, TEXT_ORDS_F,
	   world->turn);
  num_orders = 0;
  for (i = 0; i < world->num_players; i++)
    if (world->player[i]) world->player[i]->num_orders = 0;
  if ((in_fptr = fopen (filename, "r")) != NULL)
    {
      ProcessFile(in_fptr, this);
      fclose (in_fptr);
    }
  else
    {
      fprintf(stderr, "Cannot open file %s", filename);
      return 0;
    }
  for (i = 1; i < world->num_players; i++)
    if (world->player[i] && !world->player[i]->num_orders && world->turn > 0)
      {
	player_t *p = world->get_player(i);
	p->mesg(" - SORRY, BUT THE MODERATOR DID NOT RECEIVE ORDERS FROM YOU FOR THIS TURN REPORT.\n"
		" - PLEASE POST YOUR ORDERS FOR THIS TURN EARLY, TO ENSURE THIS DOESN'T HAPPEN AGAIN.\n");
      }
  /*  remove (filename); */ /* remove order file now we've finished with it */
  return 1;
}
@
