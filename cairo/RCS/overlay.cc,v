head	1.1;
access;
symbols;
locks
	ralexand:1.1; strict;
comment	@// @;


1.1
date	2016.12.30.14.26.20;	author ralexand;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <string>
#include <map>
#include <vector>
#include <typeinfo>
#include <cairomm/context.h>
#include <librsvg/rsvg.h>

#include <assert.h>

#include "lizards.h"

#define min(a, b) (a < b ? a : b)

overlay_hex_t::overlay_hex_t()
{
  hex = 0;
}

overlay_hex_t::overlay_hex_t(point_t _p, hex_t *_hex)
{
  xy = _p;
  hex = _hex;
}

int overlay_hex_t::mark(int p, int m)
{
  unsigned int mask = 1 << p;
  int old = marking & mask;
  switch(m)
    {
    case OVERLAY_CHECK:
      break;
    case OVERLAY_CLEAR:
      marking = marking & ~mask;
      break;
    case OVERLAY_MARK:
      marking = marking | mask;
      break;
    }
  return old;
}

/* ----------------------------------------------------------------------
--
-- overlay_grid_t
--
---------------------------------------------------------------------- */

overlay_hex_t * overlay_grid_t::set(point_t p, overlay_hex_t *nh)
{
  assert(p.x >= 0 && p.x < width);
  assert(p.y >= 0 && p.y < height);

  overlay_hex_t *oh = overlay[p.y * width + p.x];
  overlay[p.y * width + p.x] = nh;
  return oh;
}

overlay_hex_t * overlay_grid_t::get(point_t p)
{
  assert(p.x >= 0 && p.x < width);
  assert(p.y >= 0 && p.y < height);

  return(overlay[p.y * width + p.x]);
}

overlay_grid_t::overlay_grid_t(grid_t* g, int p)
{
  grid = g;
  width = g->width;
  height = g->height;

  int size = width * height;
  overlay = new overlay_hex_t*[size];

  for (int x = 0; x < width; x++)
    for (int y = 0; y < height; y++)
      {
	point_t p(x, y);
	hex_t *h = (*grid)(p);
	overlay_hex_t *ovly = new overlay_hex_t(p, h);
	set(p, ovly);
      }
}

void overlay_grid_t::mark_hex(int p, point_t pt, int d)
{
  get(pt)->mark(p, OVERLAY_MARK);
  if (d > 0)
    for (int i = 0; i < 6; i++)
      {
	point_t npt = grid->move(pt, i);
	mark_hex(p, npt, d-1);
      }
}

int overlay_grid_t::mark(int p)
{
  if (p == 0)
    {
      for (int x = 0; x < width; x++)
	for (int y = 0; y < height; y++)
	  {
	    overlay_hex_t *o = get(point_t(x, y));
	    if (o->hex)
	      o->mark(p, OVERLAY_MARK);
	    else
	      o->mark(p, OVERLAY_CLEAR);
	  }
      return width * height;
    }

  for (int x = 0; x < width; x++)
    for (int y = 0; y < height; y++)
      get(point_t(x, y))->mark(p, OVERLAY_CLEAR);

  for (int x = 0; x < width; x++)
    for (int y = 0; y < height; y++)
      {
	point_t pt(x, y);
	hex_t* hex = (*grid)(pt);
	if ((hex->owner == p) && hex->get(BAND))
	  {
	    mark_hex(p, pt, hex->isa(PEAK) ? 3 : 2);
	  }
      }
  int count = 0;
  for (int x = 0; x < width; x++)
    for (int y = 0; y < height; y++)
      {
	point_t pt(x, y);
	if (get(pt)->mark(p, OVERLAY_CHECK))
	  count++;
      }
  return count;
}

std::vector<overlay_hex_t*> overlay_grid_t::extract(int pl)
{
  std::vector<overlay_hex_t*>ol;
  for (int x = 0; x < width; x++)
    for (int y = 0; y < height; y++)
      {
	point_t pt(x, y);
	if (get(point_t(x, y)) && get(pt)->mark(pl, OVERLAY_CHECK))
	  ol.push_back(get(pt));
      }
  return ol;
}
@
