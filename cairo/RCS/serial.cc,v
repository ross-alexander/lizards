head	1.1;
access;
symbols;
locks
	ralexand:1.1; strict;
comment	@// @;


1.1
date	2012.11.15.16.48.26;	author ralexand;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <string>
#include <map>
#include <vector>
#include <typeinfo>

#include <errno.h>
#include <assert.h>
#include <cairomm/context.h>
#include <librsvg/rsvg.h>

#include <libxml++/libxml++.h>
#include <json/json.h>

#include "lizards.h"

serial_t::serial_t()
{
  json = json_object_new_object();
}

int serial_t::to_file(grid_t* grid, const char *path)
{
  const char *ns = "lizards";
  xmlpp::Document doc("1.0");
  xmlpp::Element *xn_lizards = doc.create_root_node("lizards", "", ns);
  xmlpp::Element* xn_map = xn_lizards->add_child("map");
  xn_map->set_attribute("width", Glib::ustring::compose("%1", grid->width));
  xn_map->set_attribute("height", Glib::ustring::compose("%1", grid->height));

  for (int x = 0; x < grid->width; x++)
    for (int y = 0; y < grid->width; y++)
      {
	hex_t *hex = (*grid)(x, y);
	char *terrain = (char*)"hex";
	if (typeid(*hex) == typeid(water_t)) terrain = (char*)"water";
	else if (typeid(*hex) == typeid(plains_t)) terrain = (char*)"plains";
	else if (typeid(*hex) == typeid(swamp_t)) terrain = (char*)"swamp";
	else if (typeid(*hex) == typeid(fertile_t)) terrain = (char*)"fertile";
	else if (typeid(*hex) == typeid(scrub_t)) terrain = (char*)"scrub";
	else if (typeid(*hex) == typeid(ruin_t)) terrain = (char*)"ruin";
	else if (typeid(*hex) == typeid(den_t)) terrain = (char*)"den";
	else if (typeid(*hex) == typeid(peak_t)) terrain = (char*)"peak";
	else if (typeid(*hex) == typeid(volcano_t)) terrain = (char*)"volcano";
	else if (typeid(*hex) == typeid(temple_t)) terrain = (char*)"temple";
	else if (typeid(*hex) == typeid(whirlpool_t)) terrain = (char*)"whirlpool";
	else if (typeid(*hex) == typeid(cursed_t)) terrain = (char*)"cursed";
	else printf("Missing type %s\n", typeid(*hex).name());

	xmlpp::Element *xn_hex = xn_map->add_child(terrain);
	xn_hex->set_attribute("x", Glib::ustring::compose("%1", hex->xy.x));
	xn_hex->set_attribute("y", Glib::ustring::compose("%1", hex->xy.y));
	xn_hex->set_attribute("id", Glib::ustring::compose("%1", hex->getid()));
	xn_hex->set_attribute("owner", Glib::ustring::compose("%1", hex->owner));

	if (typeid(*hex) == typeid(fertile_t)) 
	  {
	    fertile_t *fertile = dynamic_cast<fertile_t*>(hex);
	    xn_hex->set_attribute("age", Glib::ustring::compose("%1", fertile->age));
	  }
	if (typeid(*hex) == typeid(den_t)) 
	  {
	    den_t *den = dynamic_cast<den_t*>(hex);
	    xn_hex->set_attribute("size", Glib::ustring::compose("%1", den->size));
	    xn_hex->set_attribute("type", Glib::ustring::compose("%1", den->type));
	  }
	if (hex->get(BAND))
	  {
	    band_t *band = dynamic_cast<band_t*>(hex->get(BAND));
	    xmlpp::Element *xn_band = xn_hex->add_child("band");
	    if (band->get(RED)) xn_band->set_attribute("red", Glib::ustring::compose("%1", band->get(RED)));
	    if (band->get(GREEN)) xn_band->set_attribute("green", Glib::ustring::compose("%1", band->get(GREEN)));
	    if (band->get(YELLOW)) xn_band->set_attribute("yellow", Glib::ustring::compose("%1", band->get(YELLOW)));
	    if (band->get(GREY)) xn_band->set_attribute("grey", Glib::ustring::compose("%1", band->get(GREY)));
	    if (band->get(BLACK)) xn_band->set_attribute("black", Glib::ustring::compose("%1", band->get(BLACK)));
	  }
      }

  doc.write_to_file_formatted(path);
  return 1;
}

game_t * serial_t::from_file(const char *path)
{
  xmlpp::DomParser parser(path);

  if (!parser)
    {
      fprintf(stderr, "Failed to open %s: %s\n", path, strerror(errno));
      exit(1);
    }

  xmlpp::Element *xn_swamp = parser.get_document()->get_root_node();
  assert(xn_swamp);
  if (xn_swamp->get_name() != "lizards")
    {
      fprintf(stderr, "Root element is not 'lizards'\n");
      exit(1);
    }

  //  assert(root->get_attribute("game"));
  //  assert(root->get_attribute("dir"));
  //  assert(root->get_attribute("turn"));

  //  if (game) delete game;
  //  game = strdup(xn_swamp->get_attribute("game")->get_value().data());

  //  if (dir) delete dir;
  //  dir = strdup(xn_swamp->get_attribute("dir")->get_value().data());

  //  xmlDocPtr doc = xmlParseFile(path);
  //  xmlXPathContextPtr ctx = xmlXPathNewContext(doc);
  //  xmlXPathObjectPtr res;

  //  turn = strtol(xn_swamp->get_attribute("dir")->get_value().data(), NULL, 10);

  //  printf("%s [%s] turn %d\n", game, dir, turn);

  xmlpp::NodeSet ns = xn_swamp->find("player");

  int nplayers = ns.size();
  assert(nplayers >= 1);

  printf("Number of players is %d\n", nplayers);

  player_t ** plist = new player_t*[nplayers + 2];

  //  player[0] = new player_t;
  //  player[0]->num = 0;
  //  player[0]->ref = strdup("CG-00");
  //  player[0]->clan = strdup("Circle Games");
  //  player[0]->code = strdup("C-G");

  for (unsigned int i = 0; i < ns.size(); i++)
    {
      xmlpp::Element *e = dynamic_cast<xmlpp::Element*>(ns[i]);
      assert(e != NULL);
      assert(e->get_attribute("startup"));
      plist[i+1] = new player_t;
      plist[i+1]->startup = strdup(e->get_attribute("startup")->get_value().data());
    }
  

  xmlpp::NodeSet map_ns = xn_swamp->find("map");
  assert(map_ns.size() == 1);

  xmlpp::Element *xn_map = dynamic_cast<xmlpp::Element*>(map_ns[0]);
  assert(xn_map->get_name() == "map");
  assert(xn_map->get_attribute("width"));
  assert(xn_map->get_attribute("height"));

  int width = strtol(xn_map->get_attribute("width")->get_value().data(), 0, 10);
  int height = strtol(xn_map->get_attribute("height")->get_value().data(), 0, 10);

  game_t * game = new game_t((player_t**)plist);
  grid_t * grid = new grid_t(width, height);
  game->grid = grid;
  return game;
}

@
